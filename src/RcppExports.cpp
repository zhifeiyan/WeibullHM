// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// sample_et_st
Rcpp::List sample_et_st(arma::vec rt, double wb_shape, arma::vec wb_scale, arma::cube p, arma::mat q, arma::vec e_stat, arma::vec s_stat, int ntrial, int nstate, int nenv);
RcppExport SEXP _WeibullHM_sample_et_st(SEXP rtSEXP, SEXP wb_shapeSEXP, SEXP wb_scaleSEXP, SEXP pSEXP, SEXP qSEXP, SEXP e_statSEXP, SEXP s_statSEXP, SEXP ntrialSEXP, SEXP nstateSEXP, SEXP nenvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type rt(rtSEXP);
    Rcpp::traits::input_parameter< double >::type wb_shape(wb_shapeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type wb_scale(wb_scaleSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type e_stat(e_statSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s_stat(s_statSEXP);
    Rcpp::traits::input_parameter< int >::type ntrial(ntrialSEXP);
    Rcpp::traits::input_parameter< int >::type nstate(nstateSEXP);
    Rcpp::traits::input_parameter< int >::type nenv(nenvSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_et_st(rt, wb_shape, wb_scale, p, q, e_stat, s_stat, ntrial, nstate, nenv));
    return rcpp_result_gen;
END_RCPP
}
// stat_dist
Rcpp::List stat_dist(arma::cube p, arma::mat q, int nstate, int nenv);
RcppExport SEXP _WeibullHM_stat_dist(SEXP pSEXP, SEXP qSEXP, SEXP nstateSEXP, SEXP nenvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type nstate(nstateSEXP);
    Rcpp::traits::input_parameter< int >::type nenv(nenvSEXP);
    rcpp_result_gen = Rcpp::wrap(stat_dist(p, q, nstate, nenv));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_WeibullHM_sample_et_st", (DL_FUNC) &_WeibullHM_sample_et_st, 10},
    {"_WeibullHM_stat_dist", (DL_FUNC) &_WeibullHM_stat_dist, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_WeibullHM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
